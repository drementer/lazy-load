{"mappings":"AAAA;;;;;;;;ICAA,2CAAe;IACb,OAAO;QACL,KAAK;QACL,QAAQ;QACR,QAAQ;IACV;IACA,WAAW;QACT,QAAQ;QACR,SAAS;IACX;IACA,UAAU,KAAO;IACjB,WAAW,KAAO;IAClB,SAAS,CAAC,SAAS,QAAU,QAAQ,KAAK,aAAa,SAAS;IAChE,UAAU;QACR,MAAM;QACN,WAAW;QACX,YAAY;IACd;AACF;;CDVC;AERD,MAAM,0CAAoB;IAAC;IAAO;IAAW;IAAS;IAAS;CAAS;AAExE,MAAM,mCAAa,CAAC,SAAS;IAC3B,IAAI,OAAO,KAAK,QAAQ,aAAa,OAAO,OAAO;IACnD,IAAI,OAAO,QAAQ,QAAQ,aAAa,UAAU,OAAO;IACzD,IAAI,OAAO,QAAQ,QAAQ,aAAa,UAAU,OAAO;AAC3D;AAEA,MAAM,sCAAgB,CAAC,SAAS;IAC9B,QAAQ,UAAU,IAAI,SAAS,UAAU;IACzC,QAAQ,UAAU,OAAO,SAAS,UAAU;IAE5C,QAAQ,gBAAgB,SAAS,MAAM;IACvC,QAAQ,gBAAgB,SAAS,MAAM;IACvC,QAAQ,gBAAgB,SAAS,MAAM;IAEvC,SAAS,SAAS;AACpB;IAEA,2CAAe,CAAC,SAAS;IACvB,MAAM,cAAc,QAAQ,QAAQ;IACpC,MAAM,cAAc,wCAAkB,SAAS;IAE/C,IAAI,CAAC,aAAa,OAAO,QAAQ,KAAK,0BAA0B;IAEhE,MAAM,SAAS;QACb,KAAK,QAAQ,aAAa,SAAS,MAAM;QACzC,QAAQ,QAAQ,aAAa,SAAS,MAAM;QAC5C,QAAQ,QAAQ,aAAa,SAAS,MAAM;IAC9C;IACA,MAAM,kBAAkB,IAAM,oCAAc,SAAS;IAErD,iCAAW,SAAS;IAEpB,QAAQ,UAAU,IAAI,SAAS,UAAU;IACzC,QAAQ,iBAAiB,QAAQ,iBAAiB;QAAE,MAAM;IAAK;AACjE;;;ACpCe,kDAA6B,IAAI,EAAE,QAAQ,EAAE,QAAQ;IAClE,MAAM,qBAAqB,CAAC,SAAS;QACnC,QAAQ,QAAQ,CAAC;YACf,IAAI,CAAC,MAAM,gBAAgB;YAE3B,SAAS,MAAM;YACf,SAAS,UAAU,MAAM;QAC3B;IACF;IAEA,MAAM,WAAW,IAAI,qBAAqB,oBAAoB;IAE9D,SAAS,QAAQ;AACnB;;;ICbA,2CAAe,CAAC,UAAU,OAAO,QAAQ;IACvC,IAAI,oBAAoB,SAAS,OAAO;QAAC;KAAS;IAClD,IAAI,oBAAoB,UAAU,OAAO;IACzC,IAAI,oBAAoB,OAAO,OAAO;IAEtC,OAAO,KAAK,iBAAiB;AAC/B;;;IJSA,2CAAe,CAAC,UAAU,iBAAiB,CAAC,CAAC;IAC3C,MAAM,WAAW;QAAE,GAAG,CAAA,GAAA,wCAAc,CAAC;QAAE,GAAG,cAAc;IAAC;IACzD,MAAM,YAAY,CAAA,GAAA,wCAAU,EAAE;IAE9B,IAAI,CAAC,UAAU,QAAQ,OAAO,QAAQ,KAAK;IAE3C,MAAM,mBAAmB,CAAC;QACxB,IAAI;YACF,SAAS,UAAU;YACnB,CAAA,GAAA,wCAAQ,EAAE,QAAQ;QACpB,EAAE,OAAO,OAAO;YACd,SAAS,QAAQ,QAAQ,MAAM;QACjC;IACF;IAEA,UAAU,QAAQ,CAAC;QACjB,CAAA,GAAA,wCAAO,EAAE,MAAM,kBAAkB,SAAS;IAC5C;AACF","sources":["src/app.js","src/defaultSettings.js","src/assetLoader.js","src/observer.js","src/getElements.js"],"sourcesContent":["/**\n * Lazy-load.js\n *\n * @author drementer\n * @module lazyLoad\n * @version 1.0.7\n * @license MIT\n * @see {@link https://github.com/drementer/lazy-load.js}\n */\n\nimport defaultSettings from './defaultSettings.js';\nimport loadAsset from './assetLoader.js';\nimport observer from './observer.js';\nimport getElements from './getElements.js';\n\nexport default (selector, customSettings = {}) => {\n  const settings = { ...defaultSettings, ...customSettings };\n  const lazyItems = getElements(selector);\n\n  if (!lazyItems.length) return console.warn('No lazy loadable element found!');\n\n  const observerCallback = (target) => {\n    try {\n      settings.onLoading(target);\n      loadAsset(target, settings);\n    } catch (error) {\n      settings.onError(target, error.message);\n    }\n  };\n\n  lazyItems.forEach((item) => {\n    observer(item, observerCallback, settings.observer);\n  });\n};\n","export default {\n  attrs: {\n    src: 'lazy',\n    srcset: 'lazy-srcset',\n    poster: 'lazy-poster',\n  },\n  modifiers: {\n    loaded: '-loaded',\n    loading: '-loading',\n  },\n  onLoaded: () => {},\n  onLoading: () => {},\n  onError: (element, error) => console.warn('Error on:', element, error),\n  observer: {\n    root: null,\n    threshold: 1,\n    rootMargin: '100% 0px',\n  },\n};\n","const supportedElements = ['img', 'picture', 'video', 'embed', 'object'];\n\nconst loadAssets = (element, assets) => {\n  if (assets.src) element.setAttribute('src', assets.src);\n  if (assets.srcset) element.setAttribute('srcset', assets.srcset);\n  if (assets.poster) element.setAttribute('poster', assets.poster);\n};\n\nconst elementLoaded = (element, settings) => {\n  element.classList.add(settings.modifiers.loaded);\n  element.classList.remove(settings.modifiers.loading);\n\n  element.removeAttribute(settings.attrs.src);\n  element.removeAttribute(settings.attrs.srcset);\n  element.removeAttribute(settings.attrs.poster);\n\n  settings.onLoaded(element);\n};\n\nexport default (element, settings) => {\n  const elementType = element.tagName.toLowerCase();\n  const isSupported = supportedElements.includes(elementType);\n\n  if (!isSupported) return console.warn('Element not supported!', element);\n\n  const assets = {\n    src: element.getAttribute(settings.attrs.src),\n    srcset: element.getAttribute(settings.attrs.srcset),\n    poster: element.getAttribute(settings.attrs.poster),\n  };\n  const handleLoadEvent = () => elementLoaded(element, settings);\n\n  loadAssets(element, assets);\n\n  element.classList.add(settings.modifiers.loading);\n  element.addEventListener('load', handleLoadEvent, { once: true });\n};\n","export default function observeIntersection(item, callback, settings) {\n  const handleIntersection = (entries, observer) => {\n    entries.forEach((entry) => {\n      if (!entry.isIntersecting) return;\n\n      callback(entry.target);\n      observer.unobserve(entry.target);\n    });\n  };\n\n  const observer = new IntersectionObserver(handleIntersection, settings);\n\n  observer.observe(item);\n}\n","export default (selector, root = document) => {\n  if (selector instanceof Element) return [selector];\n  if (selector instanceof NodeList) return selector;\n  if (selector instanceof Array) return selector;\n\n  return root.querySelectorAll(selector);\n};\n"],"names":[],"version":3,"file":"lazy-load.js.map","sourceRoot":"../"}