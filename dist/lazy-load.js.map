{"mappings":"AAAA;;;;;;;;ACAA;;;;;;;;;;CAUC,GACD,MAAM,uCAAiB;IACrB,KAAK;IACL,UAAU;IACV,aAAa;IACb,UAAU,KAAO;IACjB,SAAS,CAAC,SAAS;QACjB,QAAQ,MAAM,2CAAiC,SAAS;IAC1D;IACA,UAAU;QACR,MAAM;QACN,WAAW;QACX,YAAY;IACd;AACF;IAEA,2CAAe;;CDlBd;AERD;;;;;;;;CAQC,GACD,MAAM,kCAAY,CAAC,SAAS,KAAK;IAC/B,QAAQ,MAAM;IACd,QAAQ,MAAM;AAChB;AAEA,MAAM,uCAAiB,CAAC,SAAS;IAC/B,QAAQ,MAAM,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC1C;AAEA;;;;;;;;CAQC,GACD,MAAM,oCAAc,CAAC,SAAS,KAAK;IACjC,IAAI,MAAM,QAAQ,cAAc;IAChC,IAAI,CAAC,KAAK;QACR,MAAM,SAAS,cAAc;QAC7B,QAAQ,OAAO;IACjB;IACA,gCAAU,KAAK,KAAK;AACtB;AAEA;;;;;;;CAOC,GACD,MAAM,kCAAY,CAAC,SAAS;IAC1B,QAAQ,MAAM;AAChB;AAEA;;;;;;CAMC,GACD,MAAM,kCAAY,CAAC,SAAS;IAC1B,MAAM,OAAE,GAAG,EAAE,GAAG;IAEhB,MAAM,gBAAgB;QACpB,KAAK;QACL,SAAS;QACT,OAAO;IACT;IAEA,MAAM,cAAc,QAAQ,QAAQ;IACpC,MAAM,eAAe,aAAa,CAAC,YAAY;IAE/C,MAAM,YAAY,QAAQ,aAAa,CAAC,EAAE,IAAI,IAAI,CAAC;IACnD,MAAM,WAAW,QAAQ,aAAa,CAAC,EAAE,IAAI,IAAI,CAAC,KAAK;IACvD,MAAM,iBAAiB,QAAQ,aAAa,CAAC,EAAE,IAAI,WAAW,CAAC;IAE/D,IAAI,gBAAgB,OAAO,qCAAe,SAAS;IACnD,IAAI,cAAc,OAAO,aAAa,SAAS,WAAW;IAE1D,MAAM,IAAI,MAAM,CAAC,sBAAsB,EAAE,YAAY,CAAC;AACxD;IAEA,2CAAe;;;AFhEf;;;;;CAKC,GACD,MAAM,iCAAW,CAAC,WAAW,CAAC,CAAC;IAC7B;;;;GAIC,GACD,MAAM,UAAU;QAAE,GAAG,CAAA,GAAA,wCAAa,CAAC;QAAE,GAAG,QAAQ;IAAC;IAEjD;;;;;;;GAOC,GACD,MAAM,qBAAqB,CAAC,SAAS;QACnC,QAAQ,QAAQ,CAAC;YACf,IAAI,CAAC,MAAM,gBAAgB;YAC3B,MAAM,UAAE,MAAM,EAAE,GAAG;YAEnB,IAAI;gBACF,CAAA,GAAA,wCAAQ,EAAE,QAAQ;gBAClB,QAAQ,SAAS;YACnB,EAAE,OAAO,OAAO;gBACd,QAAQ,QAAQ,QAAQ;YAC1B,SAAU;gBACR,SAAS,UAAU,SAAS,iCAAiC;YAC/D;QACF;IACF;IAEA;;;;GAIC,GACD,MAAM,WAAW,IAAI,qBACnB,oBACA,QAAQ;IAGV;;;;GAIC,GACD,MAAM,gBAAgB,SAAS,iBAAiB,QAAQ;IAExD,cAAc,QAAQ,CAAC,OAAS,SAAS,QAAQ;AACnD;IAEA,2CAAe","sources":["src/index.js","src/options.js","src/assetLoader.js"],"sourcesContent":["/**\n * Lazy-load.js\n *\n * @author drementer\n * @module lazyLoad\n * @version 1.0.6\n * @license MIT\n * @see {@link https://github.com/drementer/lazy-load.js}\n */\n\nimport defaultOptions from './options.js';\nimport loadAsset from './assetLoader.js';\n\n/**\n * Lazy load assets.\n *\n * @param {string} [selector=\"[lazy]\"] - The CSS selector for lazy loadable elements.\n * @param {Object} [settings={}] - Additional options for configuring the lazy loading behavior.\n */\nconst lazyLoad = (settings = {}) => {\n  /**\n   * Options object for configuring the lazy loading behavior.\n   *\n   * @type {Object}\n   */\n  const options = { ...defaultOptions, ...settings };\n\n  /**\n   * Handles the intersection of lazy load elements.\n   *\n   * @private\n   *\n   * @param {IntersectionObserverEntry[]} entries - The entries for the intersection observer.\n   * @param {IntersectionObserver} observer - The intersection observer instance.\n   */\n  const handleIntersection = (entries, observer) => {\n    entries.forEach((entry) => {\n      if (!entry.isIntersecting) return;\n      const { target } = entry;\n\n      try {\n        loadAsset(target, options);\n        options.onLoaded(target);\n      } catch (error) {\n        options.onError(target, error);\n      } finally {\n        observer.unobserve(target); // bunun tam testini yapmak lazim\n      }\n    });\n  };\n\n  /**\n   * IntersectionObserver used for lazy loading.\n   *\n   * @type {IntersectionObserver}\n   */\n  const observer = new IntersectionObserver(\n    handleIntersection,\n    options.observer\n  );\n\n  /**\n   * NodeList of lazy loadable elements.\n   *\n   * @type {NodeList}\n   */\n  const lazyLoadItems = document.querySelectorAll(options.selector);\n\n  lazyLoadItems.forEach((item) => observer.observe(item));\n};\n\nexport default lazyLoad;\n","/**\n * Default options for lazy loading behavior.\n *\n * @type {Object}\n *\n * @param {string} [tag=selector] - The CSS selector for lazy loadable elements.\n * @param {string} [toggleClass=\"-loaded\"] - The class name to toggle on elements after loading.\n * @param {Function} [onLoaded] - Callback function to execute when an element is successfully loaded.\n * @param {Function} [onError] - Callback function to execute when an error occurs during loading.\n * @param {Object} [observer={ root: null, threshold: 1, rootMargin: '300px 0px' }] - Configuration for IntersectionObserver used for lazy loading.\n */\nconst defaultOptions = {\n  tag: 'lazy',\n  selector: '[lazy]',\n  toggleClass: '-loaded',\n  onLoaded: () => {},\n  onError: (element, error) => {\n    console.error('ðŸš€ Error on ~ element, error:', element, error);\n  },\n  observer: {\n    root: null,\n    threshold: 1,\n    rootMargin: '100% 0px', // BurayÄ± daha detalÄ± araÅŸtÄ±rmam gerek\n  },\n};\n\nexport default defaultOptions;\n","/**\n * Loads the asset for the given image element.\n *\n * @private\n *\n * @param {HTMLImageElement} element - The image element to load the asset for.\n * @param {string} src - The asset path attribute value.\n * @param {string} alt - The asset alt attribute value.\n */\nconst loadImage = (element, src, alt) => {\n  element.src = src;\n  element.alt = alt;\n};\n\nconst loadBackground = (element, src) => {\n  element.style.background = `url(${src})`;\n};\n\n/**\n * Loads the asset for the given picture element.\n *\n * @private\n *\n * @param {HTMLPictureElement} element - The picture element to load the asset for.\n * @param {string} src - The asset URL attribute value.\n * @param {string} alt - The asset alt attribute value.\n */\nconst loadPicture = (element, src, alt) => {\n  let img = element.querySelector('img');\n  if (!img) {\n    img = document.createElement('img');\n    element.append(img);\n  }\n  loadImage(img, src, alt);\n};\n\n/**\n * Loads the asset for the given video element.\n *\n * @private\n *\n * @param {HTMLVideoElement} element - The video element to load the asset for.\n * @param {string} src - The asset URL attribute value.\n */\nconst loadVideo = (element, src) => {\n  element.src = src;\n};\n\n/**\n * Loads the asset for the given element based on its type (img, picture, video).\n *\n * @private\n *\n * @param {HTMLElement} element - The element to load the asset for.\n */\nconst loadAsset = (element, options) => {\n  const { tag } = options;\n\n  const loadFunctions = {\n    img: loadImage,\n    picture: loadPicture,\n    video: loadVideo,\n  };\n\n  const elementType = element.tagName.toLowerCase();\n  const loadFunction = loadFunctions[elementType];\n\n  const assetAttr = element.getAttribute(`${tag}-src`);\n  const assetAlt = element.getAttribute(`${tag}-alt`) || '';\n  const backgroundAttr = element.getAttribute(`${tag}-background`);\n\n  if (backgroundAttr) return loadBackground(element, backgroundAttr);\n  if (loadFunction) return loadFunction(element, assetAttr, assetAlt);\n\n  throw new Error(`Invalid element type: ${elementType}`);\n};\n\nexport default loadAsset;\n"],"names":[],"version":3,"file":"lazy-load.js.map","sourceRoot":"../"}