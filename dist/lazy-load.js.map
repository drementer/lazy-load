{"mappings":"AAAA;;;;;;;;ICAA,2CAAe;IACb,OAAO;QACL,KAAK;QACL,QAAQ;QACR,QAAQ;IACV;IACA,WAAW;QACT,QAAQ;QACR,SAAS;IACX;IACA,UAAU;QACR,MAAM;QACN,WAAW;QACX,YAAY;IACd;IACA,UAAU,KAAO;IACjB,WAAW,KAAO;IAClB,SAAS,CAAC,SAAS,QAAU,QAAQ,MAAM,aAAa,SAAS;AACnE;;CDVC;AERD,MAAM,oCAAc,CAAC,SAAS;IAC5B,QAAQ,gBAAgB,QAAQ,MAAM;IACtC,QAAQ,gBAAgB,QAAQ,MAAM;IACtC,QAAQ,gBAAgB,QAAQ,MAAM;AACxC;AAEA,MAAM,+BAAS;IACb,SAAS,CAAC,SAAS;QACjB,MAAM,aAAa,IAAM,6BAAO,OAAO,SAAS;QAChD,QAAQ,UAAU,IAAI,QAAQ,UAAU;QACxC,QAAQ,iBAAiB,QAAQ,YAAY;YAAE,MAAM;QAAK;IAC5D;IACA,QAAQ,CAAC,SAAS;QAChB,QAAQ,UAAU,OAAO,QAAQ,UAAU;QAC3C,QAAQ,UAAU,IAAI,QAAQ,UAAU;QAExC,kCAAY,SAAS;QACrB,QAAQ,SAAS;IACnB;IACA,OAAO,CAAC,SAAS,SAAS;QACxB,QAAQ,UAAU,OAAO,QAAQ,UAAU;QAC3C,QAAQ,QAAQ,SAAS;IAC3B;AACF;IAEA,2CAAe;;;ICzBf,2CAAe,CAAC,SAAS;IACvB,MAAM,SAAS;QACb,KAAK,QAAQ,aAAa,QAAQ,MAAM;QACxC,QAAQ,QAAQ,aAAa,QAAQ,MAAM;QAC3C,QAAQ,QAAQ,aAAa,QAAQ,MAAM;IAC7C;IAEA,IAAI,OAAO,KAAK,QAAQ,aAAa,OAAO,OAAO;IACnD,IAAI,OAAO,QAAQ,QAAQ,aAAa,UAAU,OAAO;IACzD,IAAI,OAAO,QAAQ,QAAQ,aAAa,UAAU,OAAO;AAC3D;;;ACVA,MAAM,0CAAoB;IAAC;IAAO;IAAW;IAAS;IAAS;CAAS;IAExE,2CAAe,CAAC;IACd,MAAM,cAAc,QAAQ,QAAQ;IACpC,MAAM,cAAc,wCAAkB,SAAS;IAE/C,IAAI,aAAa,OAAO;IACxB,MAAM,IAAI,MAAM,CAAC,aAAa,EAAE,YAAY,kBAAkB,CAAC;AACjE;;;ICRA,2CAAe,CAAC,MAAM,UAAU;IAC9B,MAAM,qBAAqB,CAAC,SAAS;QACnC,QAAQ,QAAQ,CAAC;YACf,IAAI,CAAC,MAAM,gBAAgB;YAE3B,SAAS,MAAM;YACf,SAAS,UAAU,MAAM;QAC3B;IACF;IAEA,MAAM,WAAW,IAAI,qBAAqB,oBAAoB;IAE9D,SAAS,QAAQ;AACnB;;;ICbA,2CAAe,CAAC,UAAU,OAAO,QAAQ;IACvC,IAAI,oBAAoB,SAAS,OAAO;QAAC;KAAS;IAClD,IAAI,oBAAoB,UAAU,OAAO;IACzC,IAAI,oBAAoB,OAAO,OAAO;IAEtC,OAAO,KAAK,iBAAiB;AAC/B;;;INWA,2CAAe,CAAC,UAAU,gBAAgB,CAAC,CAAC;IAC1C,MAAM,UAAU;QAAE,GAAG,CAAA,GAAA,wCAAa,CAAC;QAAE,GAAG,aAAa;IAAC;IACtD,MAAM,YAAY,CAAA,GAAA,wCAAU,EAAE;IAE9B,IAAI,CAAC,UAAU,QAAQ,OAAO,QAAQ,MAAM;IAE5C,MAAM,mBAAmB,CAAC;QACxB,CAAA,GAAA,wCAAK,EAAE,QAAQ,QAAQ;QACvB,CAAA,GAAA,wCAAQ,EAAE,QAAQ;IACpB;IAEA,UAAU,QAAQ,CAAC;QACjB,IAAI;YACF,CAAA,GAAA,wCAAU,EAAE;YACZ,CAAA,GAAA,wCAAO,EAAE,MAAM,kBAAkB,QAAQ;QAC3C,EAAE,OAAO,OAAO;YACd,CAAA,GAAA,wCAAK,EAAE,MAAM,MAAM,SAAS,MAAM;QACpC;IACF;AACF","sources":["src/app.js","src/defaultOptions.js","src/states.js","src/assetLoader.js","src/isSupported.js","src/observer.js","src/getElements.js"],"sourcesContent":["/**\n * Lazy-load.js\n *\n * @author drementer\n * @module lazyLoad\n * @version 1.0.7\n * @license MIT\n * @see {@link https://github.com/drementer/lazy-load.js}\n */\n\nimport defaultOptions from './defaultOptions.js';\nimport states from './states.js';\nimport loadAsset from './assetLoader.js';\nimport isSupported from './isSupported.js';\nimport observer from './observer.js';\nimport getElements from './getElements.js';\n\nexport default (selector, customOptions = {}) => {\n  const options = { ...defaultOptions, ...customOptions };\n  const lazyItems = getElements(selector);\n\n  if (!lazyItems.length) return console.error('No lazy loadable element found!');\n\n  const observerCallback = (target) => {\n    states.loading(target, options);\n    loadAsset(target, options);\n  };\n\n  lazyItems.forEach((item) => {\n    try {\n      isSupported(item);\n      observer(item, observerCallback, options.observer);\n    } catch (error) {\n      states.error(item, options, error.message);\n    }\n  });\n};\n","export default {\n  attrs: {\n    src: 'lazy',\n    srcset: 'lazy-srcset',\n    poster: 'lazy-poster',\n  },\n  modifiers: {\n    loaded: '-loaded',\n    loading: '-loading',\n  },\n  observer: {\n    root: null,\n    threshold: 1,\n    rootMargin: '100% 0px',\n  },\n  onLoaded: () => {},\n  onLoading: () => {},\n  onError: (element, error) => console.error('Error on:', element, error),\n};\n","const resetAssets = (element, options) => {\n  element.removeAttribute(options.attrs.src);\n  element.removeAttribute(options.attrs.srcset);\n  element.removeAttribute(options.attrs.poster);\n};\n\nconst states = {\n  loading: (element, options) => {\n    const handleLoad = () => states.loaded(element, options);\n    element.classList.add(options.modifiers.loading);\n    element.addEventListener('load', handleLoad, { once: true });\n  },\n  loaded: (element, options) => {\n    element.classList.remove(options.modifiers.loading);\n    element.classList.add(options.modifiers.loaded);\n\n    resetAssets(element, options);\n    options.onLoaded(element);\n  },\n  error: (element, options, error) => {\n    element.classList.remove(options.modifiers.loading);\n    options.onError(element, error);\n  },\n};\n\nexport default states;\n","export default (element, options) => {\n  const assets = {\n    src: element.getAttribute(options.attrs.src),\n    srcset: element.getAttribute(options.attrs.srcset),\n    poster: element.getAttribute(options.attrs.poster),\n  };\n\n  if (assets.src) element.setAttribute('src', assets.src);\n  if (assets.srcset) element.setAttribute('srcset', assets.srcset);\n  if (assets.poster) element.setAttribute('poster', assets.poster);\n};\n","const supportedElements = ['img', 'picture', 'video', 'embed', 'object'];\n\nexport default (element) => {\n  const elementType = element.tagName.toLowerCase();\n  const isSupported = supportedElements.includes(elementType);\n\n  if (isSupported) return true;\n  throw new Error(`Element type ${elementType} is not supported!`);\n};\n","export default (item, callback, settings) => {\n  const handleIntersection = (entries, observer) => {\n    entries.forEach((entry) => {\n      if (!entry.isIntersecting) return;\n\n      callback(entry.target);\n      observer.unobserve(entry.target);\n    });\n  };\n\n  const observer = new IntersectionObserver(handleIntersection, settings);\n\n  observer.observe(item);\n};\n","export default (selector, root = document) => {\n  if (selector instanceof Element) return [selector];\n  if (selector instanceof NodeList) return selector;\n  if (selector instanceof Array) return selector;\n\n  return root.querySelectorAll(selector);\n};\n"],"names":[],"version":3,"file":"lazy-load.js.map","sourceRoot":"../"}