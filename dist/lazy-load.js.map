{"mappings":"AAAA;;;;;;;;ACAA;;;;;;;;;;CAUC,GACD,MAAM,gCAAU;IACd,IAAI,YAAW;QACb,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB;IACA,IAAI,gBAAe;QACjB,OAAO,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC;IAC1B;IAEA,KAAK;IACL,WAAW;QACT,QAAQ;QACR,SAAS;IACX;IACA,UAAU,KAAO;IACjB,SAAS,CAAC,SAAS;QACjB,QAAQ,MAAM,2CAAiC,SAAS;IAC1D;IACA,UAAU;QACR,MAAM;QACN,WAAW;QACX,YAAY;IACd;AACF;IAEA,2CAAe;;CD3Bd;AERD;;;;;;;;CAQC,GACD,MAAM,kCAAY,CAAC,SAAS,KAAK,MAAM,IAAI;IACzC,QAAQ,MAAM;IACd,IAAI,KAAK,QAAQ,MAAM;AACzB;AAEA,MAAM,uCAAiB,CAAC,SAAS;IAC/B,QAAQ,MAAM,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC1C;AAEA;;;;;;;;CAQC,GACD,MAAM,oCAAc,CAAC,SAAS,KAAK;IACjC,IAAI,MAAM,QAAQ,cAAc;IAEhC,IAAI,CAAC,KAAK;QACR,MAAM,SAAS,cAAc;QAC7B,QAAQ,OAAO;IACjB;IAEA,gCAAU,KAAK,KAAK;AACtB;AAEA;;;;;;;CAOC,GACD,MAAM,kCAAY,CAAC,SAAS;IAC1B,QAAQ,MAAM;AAChB;AAEA;;;;;;CAMC,GACD,MAAM,kCAAY,CAAC,SAAS;IAC1B,MAAM,OAAE,GAAG,WAAE,OAAO,EAAE,GAAG;IAEzB,MAAM,eAAe;QACnB,KAAK;QACL,SAAS;QACT,OAAO;IACT;IAEA,MAAM,cAAc,QAAQ,QAAQ;IACpC,MAAM,cAAc,YAAY,CAAC,YAAY;IAE7C,MAAM,YAAY,QAAQ,aAAa;IACvC,MAAM,gBAAgB,QAAQ,aAAa;IAE3C,YAAY,SAAS,WAAW;AAClC;IAEA,2CAAe;;;AF9Df;;;;CAIC,GACD,MAAM,iCAAW,CAAC,MAAM,MAAM,EAAE,gBAAgB,CAAC,CAAC;IAChD,CAAA,GAAA,wCAAa,EAAE,MAAM;IAErB;;;;GAIC,GACD,MAAM,UAAU;QAAE,GAAG,CAAA,GAAA,wCAAa,CAAC;QAAE,GAAG,aAAa;IAAC;IAEtD;;;;;;;GAOC,GACD,MAAM,qBAAqB,CAAC,SAAS;QACnC,MAAM,UAAU,CAAC;YACf,MAAM,UAAE,MAAM,kBAAE,cAAc,EAAE,GAAG;YACnC,IAAI,CAAC,gBAAgB;YAErB,IAAI;gBACF,CAAA,GAAA,wCAAQ,EAAE,QAAQ;gBAClB,QAAQ,SAAS;YACnB,EAAE,OAAO,OAAO;gBACd,QAAQ,QAAQ,QAAQ;gBACxB,QAAQ,MAAM;YAChB,SAAU;gBACR,SAAS,UAAU,SAAS,iCAAiC;YAC/D;QACF;QAEA,QAAQ,QAAQ;IAClB;IAEA;;;;GAIC,GACD,MAAM,WAAW,IAAI,qBACnB,oBACA,QAAQ;IAGV;;;;GAIC,GACD,MAAM,gBAAgB,SAAS,iBAAiB,QAAQ;IAExD,cAAc,QAAQ,CAAC,OAAS,SAAS,QAAQ;AACnD;IAEA,2CAAe","sources":["src/index.js","src/options.js","src/assetLoader.js"],"sourcesContent":["/**\n * Lazy-load.js\n *\n * @author drementer\n * @module lazyLoad\n * @version 1.0.6\n * @license MIT\n * @see {@link https://github.com/drementer/lazy-load.js}\n */\n\nimport defaultOptions from './options.js';\nimport loadAsset from './assetLoader.js';\n\n/**\n * Lazy load assets.\n *\n * @param {Object} [customOptions={}] - Additional options for configuring the lazy loading behavior.\n */\nconst lazyLoad = (tag = 'lazy', customOptions = {}) => {\n  defaultOptions.tag = tag;\n\n  /**\n   * Options object for configuring the lazy loading behavior.\n   *\n   * @type {Object}\n   */\n  const options = { ...defaultOptions, ...customOptions };\n\n  /**\n   * Handles the intersection of lazy load elements.\n   *\n   * @private\n   *\n   * @param {IntersectionObserverEntry[]} entries - The entries for the intersection observer.\n   * @param {IntersectionObserver} observer - The intersection observer instance.\n   */\n  const handleIntersection = (entries, observer) => {\n    const handler = (entry) => {\n      const { target, isIntersecting } = entry;\n      if (!isIntersecting) return;\n\n      try {\n        loadAsset(target, options);\n        options.onLoaded(target);\n      } catch (error) {\n        options.onError(target, error);\n        console.error(error);\n      } finally {\n        observer.unobserve(target); // bunun tam testini yapmak lazim\n      }\n    };\n\n    entries.forEach(handler);\n  };\n\n  /**\n   * IntersectionObserver used for lazy loading.\n   *\n   * @type {IntersectionObserver}\n   */\n  const observer = new IntersectionObserver(\n    handleIntersection,\n    options.observer\n  );\n\n  /**\n   * NodeList of lazy loadable elements.\n   *\n   * @type {NodeList}\n   */\n  const lazyLoadItems = document.querySelectorAll(options.selector);\n\n  lazyLoadItems.forEach((item) => observer.observe(item));\n};\n\nexport default lazyLoad;\n","/**\n * Default options for lazy loading behavior.\n *\n * @type {Object}\n *\n * @param {string} [tag=selector] - The CSS selector for lazy loadable elements.\n * @param {string} [toggleClass=\"-loaded\"] - The class name to toggle on elements after loading.\n * @param {Function} [onLoaded] - Callback function to execute when an element is successfully loaded.\n * @param {Function} [onError] - Callback function to execute when an error occurs during loading.\n * @param {Object} [observer={ root: null, threshold: 1, rootMargin: '300px 0px' }] - Configuration for IntersectionObserver used for lazy loading.\n */\nconst options = {\n  get selector() {\n    return `[${this.tag}]`;\n  },\n  get altAttribute() {\n    return `${this.tag}-alt`;\n  },\n\n  tag: null,\n  modifiers: {\n    loaded: '-loaded',\n    loading: '-loading',\n  },\n  onLoaded: () => {},\n  onError: (element, error) => {\n    console.error('ðŸš€ Error on ~ element, error:', element, error);\n  },\n  observer: {\n    root: null,\n    threshold: 1,\n    rootMargin: '100% 0px',\n  },\n};\n\nexport default options;\n","/**\n * Loads the asset for the given image element.\n *\n * @private\n *\n * @param {HTMLImageElement} element - The image element to load the asset for.\n * @param {string} src - The asset path attribute value.\n * @param {string} alt - The asset alt attribute value.\n */\nconst loadImage = (element, src, alt = null) => {\n  element.src = src;\n  if (alt) element.alt = alt;\n};\n\nconst loadBackground = (element, src) => {\n  element.style.background = `url(${src})`;\n};\n\n/**\n * Loads the asset for the given picture element.\n *\n * @private\n *\n * @param {HTMLPictureElement} element - The picture element to load the asset for.\n * @param {string} src - The asset URL attribute value.\n * @param {string} alt - The asset alt attribute value.\n */\nconst loadPicture = (element, src, alt) => {\n  let img = element.querySelector('img');\n\n  if (!img) {\n    img = document.createElement('img');\n    element.append(img);\n  }\n\n  loadImage(img, src, alt);\n};\n\n/**\n * Loads the asset for the given video element.\n *\n * @private\n *\n * @param {HTMLVideoElement} element - The video element to load the asset for.\n * @param {string} src - The asset URL attribute value.\n */\nconst loadVideo = (element, src) => {\n  element.src = src;\n};\n\n/**\n * Loads the asset for the given element based on its type (img, picture, video).\n *\n * @private\n *\n * @param {HTMLElement} element - The element to load the asset for.\n */\nconst loadAsset = (element, options) => {\n  const { tag, altAttr } = options;\n\n  const assetLoaders = {\n    img: loadImage,\n    picture: loadPicture,\n    video: loadVideo,\n  };\n\n  const elementType = element.tagName.toLowerCase();\n  const assetLoader = assetLoaders[elementType];\n\n  const assetPath = element.getAttribute(tag);\n  const assetAltValue = element.getAttribute(altAttr);\n\n  assetLoader(element, assetPath, assetAltValue);\n};\n\nexport default loadAsset;\n"],"names":[],"version":3,"file":"lazy-load.js.map","sourceRoot":"../"}