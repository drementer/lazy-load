{"mappings":"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","sources":["src/app.js","src/defaultOptions.js","src/states.js","src/settings.js","src/assetLoader.js","src/checkSupport.js","src/observer.js","src/getElements.js"],"sourcesContent":["/**\n * Lazy-load.js\n *\n * @author drementer\n * @module lazyLoad\n * @version 1.0.7\n * @license MIT\n * @see {@link https://github.com/drementer/lazy-load.js}\n */\n\nimport defaultOptions from './defaultOptions.js';\nimport states from './states.js';\nimport loadAsset from './assetLoader.js';\nimport checkSupport from './checkSupport.js';\nimport observer from './observer.js';\nimport getElements from './getElements.js';\n\nexport default (selector, customOptions = {}) => {\n  const options = { ...defaultOptions, ...customOptions };\n\n  const observerCallback = (target) => {\n    states.loading(target, options);\n    loadAsset(target, options);\n  };\n\n  const processLazyItem = (item) => {\n    try {\n      states.waiting(item, options);\n\n      checkSupport(item);\n      observer(item, observerCallback, options.observer);\n    } catch (error) {\n      states.error(item, options, error.message);\n    }\n  };\n\n  try {\n    const lazyItems = getElements(selector);\n    if (!lazyItems.length) throw new Error('No lazy loadable element found!');\n\n    lazyItems.forEach(processLazyItem);\n  } catch (error) {\n    console.error('Lazy error:', error.message);\n  }\n};\n","/**\n * Default options for the lazy loading functionality.\n *\n * @module defaultOptions\n *\n * @property {Object} attrs - The attributes to be used for lazy loading.\n * @property {string} attrs.src - The attribute for the source of the media.\n * @property {string} attrs.srcset - The attribute for the source set of the media.\n * @property {string} attrs.poster - The attribute for the poster of the media.\n *\n * @property {Object} observer - The options for the Intersection Observer.\n * @property {Element} observer.root - The root element for the Intersection Observer.\n * @property {number} observer.threshold - The threshold for the Intersection Observer.\n * @property {string} observer.rootMargin - The root margin for the Intersection Observer.\n *\n * @property {Function} onLoaded - The callback to be executed when the media is loaded.\n * @property {Function} onLoading - The callback to be executed when the media is loading.\n * @property {Function} onError - The callback to be executed when there is an error loading the media.\n */\nexport default {\n  attrs: {\n    src: 'lazy',\n    srcset: 'lazy-srcset',\n    poster: 'lazy-poster',\n  },\n  observer: {\n    root: null,\n    threshold: 1,\n    rootMargin: '100% 0px',\n  },\n  onLoaded: () => {},\n  onLoading: () => {},\n  onError: (element, error) => console.error('Error on:', element, error),\n};\n","import settings from './settings.js';\n\n/**\n * Object managing different states.\n *\n * @module states\n *\n * @property {function} loading - Function handling loading state operations.\n * @property {function} loaded - Function handling loaded state operations.\n * @property {function} error - Function handling error state operations.\n */\nconst states = {\n  waiting: (element, options) => {\n    element.setAttribute(settings.stateAttr, settings.states.waiting);\n  },\n\n  loading: (element, options) => {\n    const handleLoad = () => {\n      states.loaded(element, options);\n    };\n    const handleError = () => {\n      states.error(element, options, 'loading media.');\n    };\n\n    element.addEventListener('load', handleLoad, { once: true });\n    element.addEventListener('error', handleError, { once: true });\n\n    element.setAttribute(settings.stateAttr, settings.states.loading);\n    options.onLoading(element);\n  },\n\n  loaded: (element, options) => {\n    element.setAttribute(settings.stateAttr, settings.states.loaded);\n\n    element.removeAttribute(options.attrs.src);\n    element.removeAttribute(options.attrs.srcset);\n    element.removeAttribute(options.attrs.poster);\n\n    options.onLoaded(element);\n  },\n\n  error: (element, options, error) => {\n    element.setAttribute(settings.stateAttr, settings.states.error);\n\n    options.onError(element, error);\n  },\n};\n\nexport default states;\n","/**\n * Default settings for the lazy loading functionality.\n *\n * @module settings\n *\n * @property {string} stateAttr - The attribute to store the state of the lazy loading process.\n * @property {Object} states - The possible states of the lazy loading process.\n * @property {string} states.waiting - The state when the element is waiting to be loaded.\n * @property {string} states.loading - The state when the element is currently loading.\n * @property {string} states.loaded - The state when the element has finished loading.\n * @property {string} states.error - The state when there was an error loading the element.\n * @property {Array.<string>} supportedElements - The types of elements that are supported for lazy loading.\n */\nexport default {\n  stateAttr: 'lazy-state',\n  states: {\n    waiting: 'waiting',\n    loading: 'loading',\n    loaded: 'loaded',\n    error: 'error',\n  },\n  supportedElements: ['img', 'picture', 'video', 'embed', 'object'],\n};\n","/**\n * Set attributes on the given HTML element based on the provided options.\n *\n * @module assetLoader\n *\n * @param {HTMLElement} element - The HTML element to set attributes on.\n * @param {Object} options - Options for attribute names.\n * @param {Object} options.attrs - Attribute names.\n * @param {string} [options.attrs.src] - Attribute name for 'src'.\n * @param {string} [options.attrs.srcset] - Attribute name for 'srcset'.\n * @param {string} [options.attrs.poster] - Attribute name for 'poster'.\n */\nexport default (element, options) => {\n  const assets = {\n    src: element.getAttribute(options.attrs.src),\n    srcset: element.getAttribute(options.attrs.srcset),\n    poster: element.getAttribute(options.attrs.poster),\n  };\n\n  if (assets.src) element.setAttribute('src', assets.src);\n  if (assets.srcset) element.setAttribute('srcset', assets.srcset);\n  if (assets.poster) element.setAttribute('poster', assets.poster);\n};\n","import settings from './settings.js';\n\n/**\n * Checks if the given HTML element is of a supported type.\n *\n * @module checkSupport\n *\n * @param {HTMLElement} element - The HTML element to be checked.\n * @throws {Error} Throws an error if the element type is not supported.\n * @returns {boolean} Returns true if the element type is supported.\n */\nexport default (element) => {\n  const elementType = element.tagName.toLowerCase();\n  const isSupported = settings.supportedElements.includes(elementType);\n\n  if (isSupported) return true;\n\n  throw new Error(`Element type ${elementType} is not supported!`);\n};\n","/**\n * Creates an Intersection Observer and starts observing the given item.\n *\n * @module observer\n *\n * @param {Element} item - The DOM element to be observed.\n * @param {Function} callback - The function to be called when the item is intersecting.\n * @param {Object} settings - The options for the Intersection Observer.\n */\nexport default (item, callback, settings) => {\n  const handleIntersection = (entries, observer) => {\n    entries.forEach((entry) => {\n      if (!entry.isIntersecting) return;\n\n      callback(entry.target);\n      observer.unobserve(entry.target);\n    });\n  };\n\n  const observer = new IntersectionObserver(handleIntersection, settings);\n\n  observer.observe(item);\n};\n","/**\n * Select elements based on a given selector within a specified root element.\n *\n * @module getElements\n *\n * @param {string | Element | NodeList | Array} selector - The selector to match elements.\n * @returns {NodeList} - The NodeList containing the selected elements.\n */\nexport default (selector) => {\n  if (selector instanceof Element) return [selector];\n  if (selector instanceof NodeList) return selector;\n  if (selector instanceof Array) return selector;\n\n  return document.querySelectorAll(selector);\n};\n"],"names":[],"version":3,"file":"lazy-load.js.map","sourceRoot":"../"}